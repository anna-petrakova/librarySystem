/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package petrakova.library.librarysystem.app;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import org.hibernate.Session;
import org.springframework.context.ApplicationContext;
import petrakova.library.librarysystem.db.BeanFactory;
import petrakova.library.librarysystem.db.Borrow;
import petrakova.library.librarysystem.db.BorrowManager;
import petrakova.library.librarysystem.db.BorrowManagerImpl;
import petrakova.library.librarysystem.db.Client;
import petrakova.library.librarysystem.db.ClientManager;
import petrakova.library.librarysystem.db.ClientManagerImpl;
import petrakova.library.librarysystem.db.DatabaseConnection;
import petrakova.library.librarysystem.db.LibraryItem;
import petrakova.library.librarysystem.db.LibraryItemManager;
import petrakova.library.librarysystem.db.LibraryItemManagerImpl;

/**
 *
 * @author Anna Petráková
 */
public class BorrowForm extends javax.swing.JPanel {
    private Session session = DatabaseConnection.getSession();
    private ApplicationContext factory = BeanFactory.getFactory();
    private BorrowManager borrowManager = BorrowManagerImpl.getInstance();
    private ClientManager clientManager = ClientManagerImpl.getInstance();
    private LibraryItemManager itemManager = LibraryItemManagerImpl.getInstance();
    private ListSelectionModel model;
    private List<Borrow> borrows = new ArrayList<>();
    private BorrowTableModel tableModel = new BorrowTableModel(borrows);
    private ListSwingWorker listSwingWorker = new ListSwingWorker();
    
    private Borrow selectedBorrow;

    /**
     * Creates new form BorrowForm
     */
    public BorrowForm() {
        initComponents();
        
        borrowsTable.setModel(tableModel);
        borrowsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        model = borrowsTable.getSelectionModel();
        
        listSwingWorker.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        clientIdField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        itemIdField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dueToComboBox = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        borrowsTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();

        jLabel1.setText("ClientID:");

        jLabel2.setText("ItemID:");

        jLabel3.setText("Return in:");

        dueToComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "30 days", "60 days", "90 days" }));

        addButton.setText("Add borrow");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        borrowsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(borrowsTable);

        deleteButton.setText("Delete borrow");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        modifyButton.setText("Modify borrow");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dueToComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(modifyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(clientIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(itemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(dueToComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(modifyButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (clientIdField.getText().isEmpty() || itemIdField.getText().isEmpty() ) {
            JOptionPane.showMessageDialog(addButton, "Fields must be filled",
                        "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if ("Change borrow".equals(addButton.getText())) {
            modifySelectedBorrow();
            addButton.setText("Add borrow");
            cleanFields();
        } else {        
            submit();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (getSelectedBorrowId() == null) {
            JOptionPane.showMessageDialog(null, "You must choose a borrow to be deleted",
                    "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        delete();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        if (getSelectedBorrowId() == null) {
            JOptionPane.showMessageDialog(null, "You must choose a borrow to be modified",
                    "Error Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        addButton.setText("Change borrow");
        modify();
    }//GEN-LAST:event_modifyButtonActionPerformed
    
    private void submit() {
        
        if (!validateInput()) return;
        
        Borrow borrow = new Borrow();        
        borrow.setDueTo(getChosenDate());      

        try {
            Client client = clientManager.findClientById(Long.parseLong(clientIdField.getText()));
            LibraryItem item = itemManager.findLibraryItemById(Long.parseLong(itemIdField.getText()));
            
            borrow.setClient(client);
            borrow.setItem(item);
            
            borrowManager.createBorrow(borrow);

            JOptionPane.showMessageDialog(addButton, "Successfully added borrow",
                    "Confirmation Message", JOptionPane.INFORMATION_MESSAGE);

        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(addButton, ex.getMessage(),
                        "Error Message", JOptionPane.ERROR_MESSAGE);  
            return;
        }
        
        borrows = borrowManager.findAllBorrows();
        
        tableModel.setBorrows(borrows);
        tableModel.fireTableDataChanged(); 
    }
    
    private LocalDate getChosenDate() {
        String dueToSelectedValue = (String) dueToComboBox.getSelectedItem();
        String numberOfDaysValue = dueToSelectedValue.split(" ")[0];
        int numberOfDays = Integer.parseInt(numberOfDaysValue);
        LocalDate dt = LocalDate.now();
        dt = dt.plusDays(numberOfDays);
        
        return dt;
    }
    
    private void cleanFields() {
        clientIdField.setText("");
        itemIdField.setText("");        
    }
    
    private boolean validateInput() {
        try {
            Long.parseLong(clientIdField.getText());
            Long.parseLong(itemIdField.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(addButton, "Id of client and item must be a number.",
                        "Error Message", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private Long getSelectedBorrowId() {
        if (model.getMaxSelectionIndex() == -1) {
            return null;
        }
        return (Long) tableModel.getValueAt(model.getMaxSelectionIndex(), 0);
    }
    
    private void delete() {
        
        Borrow borrow = borrowManager.findBorrowById(getSelectedBorrowId());
        
        borrowManager.deleteBorrow(borrow);
        
        borrows = borrowManager.findAllBorrows();
        
        tableModel.setBorrows(borrows);
        tableModel.fireTableDataChanged();        
     }
    
    private void modify() {
        Borrow borrow = borrowManager.findBorrowById(getSelectedBorrowId());
        this.selectedBorrow = borrow;
        
        clientIdField.setText(String.valueOf(borrow.getClient().getId()));
        itemIdField.setText(String.valueOf(borrow.getItem().getId()));
    }
    
    private void modifySelectedBorrow() {
        
        if (!validateInput()) return;
        
        selectedBorrow.setDueTo(getChosenDate());      

        try {
            Client client = clientManager.findClientById(Long.parseLong(clientIdField.getText()));
            LibraryItem item = itemManager.findLibraryItemById(Long.parseLong(itemIdField.getText()));
            
            selectedBorrow.setClient(client);
            selectedBorrow.setItem(item);
            
            borrowManager.modifyBorrow(selectedBorrow);

            JOptionPane.showMessageDialog(addButton, "Successfully modifed borrow",
                    "Confirmation Message", JOptionPane.INFORMATION_MESSAGE);

        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(addButton, ex.getMessage(),
                        "Error Message", JOptionPane.ERROR_MESSAGE);   
            return;
        }
        
    }
    
    private class ListSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            List<Borrow> borrowsFound;
            borrowsFound = borrowManager.findAllBorrows();
            
            borrows = borrowsFound;
            tableModel.setBorrows(borrows);
            tableModel.fireTableDataChanged();
            return null;
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTable borrowsTable;
    private javax.swing.JTextField clientIdField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> dueToComboBox;
    private javax.swing.JTextField itemIdField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyButton;
    // End of variables declaration//GEN-END:variables
}
